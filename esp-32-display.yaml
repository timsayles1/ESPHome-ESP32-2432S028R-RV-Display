substitutions:
  devicename: "esp-32-lcd-display"

globals:
  - id: data_updated
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: initial_data_received
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: recorded_display_refresh
    type: int
    restore_value: yes
    initial_value: '0'

script:
  - id: update_screen
    then:
      - lambda: 'id(data_updated) = false;'
      - component.update: lcd_display
      - lambda: 'id(recorded_display_refresh) += 1;'
      - lambda: 'id(display_last_update).publish_state(id(esptime).now().timestamp);'

wifi:
  networks:
  - ssid: !secret wifi2_ssid
    password: !secret wifi2_password
  - ssid: !secret wifi_ssid
    password: !secret wifi_password

esphome:
  name: $devicename
  build_path: ./build/$devicename
  friendly_name: ESP 32 LCD Display
  on_boot:
      priority: 200.0
      then:
        - component.update: lcd_display
        - wait_until:
            condition:
              lambda: 'return id(data_updated) == true;'
        - delay: 5s
        - logger.log: "Initial sensor data received: Refreshing display..."
        - lambda: 'id(initial_data_received) = true;'
        - script.execute: update_screen
  
esp32:
  board: esp32dev
  framework:
    type: arduino

api:
  encryption: 
    key: !secret lcd_display_enc

ota:
  - platform: esphome

captive_portal:

spi:
  - id: lcd
    clk_pin: GPIO14
    mosi_pin: GPIO13
    miso_pin: 
      number: GPIO12
      ignore_strapping_warning: true
  - id: touch
    clk_pin: GPIO25
    mosi_pin: GPIO32
    miso_pin: GPIO39

i2c:
  sda: GPIO27
  scl: GPIO22
  scan: true
  id: bus_a

color:
  - id: my_red
    red: 100%
    green: 0%
    blue: 0%
  - id: my_orange
    red: 100%
    green: 50%
    blue: 0%
  - id: my_yellow
    red: 100%
    green: 100%
    blue: 0%
  - id: my_green
    red: 0%
    green: 100%
    blue: 0%
  - id: my_blue
    red: 0%
    green: 0%
    blue: 100%
  - id: my_teal
    red: 0%
    green: 100%
    blue: 100%
  - id: my_gray
    red: 70%
    green: 70%
    blue: 70%
  - id: my_white
    red: 100%
    green: 100%
    blue: 100%
  - id: my_black
    red: 0%
    green: 0%
    blue: 0%

font:
  - file: "gfonts://Roboto+Condensed"
    id: robotocondensed_10
    size: 10
  - file: "gfonts://Roboto+Condensed"
    id: robotocondensed_12
    size: 12
  - file: "gfonts://Roboto+Condensed"
    id: robotocondensed_14
    size: 14
  - file: 'materialdesignicons-webfont.ttf'
    id: font_mdi_50
    size: 50
    glyphs: &mdi-weather-glyphs
      - "\U000F0590" # mdi-weather-cloudy
      - "\U000F0F2F" # mdi-weather-cloudy-alert
      - "\U000F0E6E" # mdi-weather-cloudy-arrow-right
      - "\U000F0591" # mdi-weather-fog
      - "\U000F0592" # mdi-weather-hail
      - "\U000F0F30" # mdi-weather-hazy
      - "\U000F0898" # mdi-weather-hurricane
      - "\U000F0593" # mdi-weather-lightning
      - "\U000F067E" # mdi-weather-lightning-rainy
      - "\U000F0594" # mdi-weather-clear-night
      - "\U000F0F31" # mdi-weather-night-partly-cloudy
      - "\U000F0595" # mdi-weather-partly-cloudy
      - "\U000F0F32" # mdi-weather-partly-lightning
      - "\U000F0F33" # mdi-weather-partly-rainy
      - "\U000F0F34" # mdi-weather-partly-snowy
      - "\U000F0F35" # mdi-weather-partly-snowy-rainy
      - "\U000F0596" # mdi-weather-pouring
      - "\U000F0597" # mdi-weather-rainy
      - "\U000F0598" # mdi-weather-snowy
      - "\U000F0F36" # mdi-weather-snowy-heavy
      - "\U000F067F" # mdi-weather-snowy-rainy
      - "\U000F0599" # mdi-weather-sunny
      - "\U000F0F37" # mdi-weather-sunny-alert
      - "\U000F14E4" # mdi-weather-sunny-off
      - "\U000F059A" # mdi-weather-sunset
      - "\U000F059B" # mdi-weather-sunset-down
      - "\U000F059C" # mdi-weather-sunset-up
      - "\U000F0F38" # mdi-weather-tornado
      - "\U000F059D" # mdi-weather-windy
      - "\U000F059E" # mdi-weather-windy-variant
  - file: 'materialdesignicons-webfont.ttf'
    id: font_mdi_status
    size: 12
    glyphs: &mdi-status-glyphs
      - "\U000F092F" # mdi:wifi-strength-0
      - "\U000F091F" # mdi:wifi-strength-1
      - "\U000F0922" # mdi:wifi-strength-2
      - "\U000F0925" # mdi:wifi-strength-3
      - "\U000F0928" # mdi:wifi-strength-4
      - "\U000F092E" # mdi:wifi-strength-off
  - file: 'materialdesignicons-webfont.ttf'
    id: font_mdi_large
    size: 60
    glyphs: *mdi-weather-glyphs
  - file: 'materialdesignicons-webfont.ttf'
    id: font_mdi_medium
    size: 24
    glyphs: *mdi-weather-glyphs
  - file: 'GothamRnd-Book.ttf'
    id: font_small_book
    size: 10
  - file: 'GothamRnd-Bold.ttf'
    id: font_large_bold
    size: 48
    glyphs: [' ', '-', '°', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'F']
  - file: 'GothamRnd-Bold.ttf'
    id: font_title
    size: 16
    glyphs: ['W', 'E', 'A', 'T', 'H', 'R', 'L', 'I', 'N', ' ', 'F']
  - file: 'GothamRnd-Bold.ttf'
    id: font_medium_bold
    size: 40
    # glyphs: [' ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'M', 'I', 'N', 'F']
  - file: 'GothamRnd-Bold.ttf'
    id: font_small_bold
    size: 10
    # glyphs: [' ', '-', '°', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'C', 'M', 'I', 'N', 'F']
      
image:
  - file: mdi:led-strip
    id: bottom_light
    resize: 45x45
  - file: mdi:led-strip-variant
    id: top_light
    resize: 45x45
  - file: mdi:security
    id: camera_control
    resize: 45x45
  - file: mdi:tire
    id: tirelinc
    resize: 55x55
   
binary_sensor:  
  - platform: status
    name: "Node Status"
    id: system_status
  - platform: touchscreen
    id: display_bottom_light
    icon: mdi:led-strip
    x_min: 30
    x_max: 90
    y_min: 20
    y_max: 80
    filters:
      - delayed_on_off: .2s
    on_press:
      then:
        - switch.toggle: lci_bottom_light
  - platform: touchscreen
    id: display_alarm_control
    icon: mdi:security
    x_min: 110
    x_max: 150
    y_min: 20
    y_max: 80
    filters:
      - delayed_on_off: .2s
    on_press:
      then:
        - switch.toggle: camera_toggler
  - platform: touchscreen
    id: display_front_light
    icon: mdi:bulkhead-light
    x_min: 165
    x_max: 215
    y_min: 20
    y_max: 80
    filters:
      - delayed_on_off: .2s
    on_press:
      then:
        - switch.toggle: lci_front_light
  - platform: touchscreen
    id: display_trailer_page
    x_min: 12
    x_max: 55
    y_min: 255
    y_max: 301
    filters:
      - delayed_on_off: .2s
    on_press:
      - display.page.show: page1
      - component.update: lcd_display
  - platform: touchscreen
    id: display_tires_page
    x_min: 189
    x_max: 233
    y_min: 255
    y_max: 303
    filters:
      - delayed_on_off: .2s
    on_press:
      - display.page.show: page2
      - component.update: lcd_display
  - platform: touchscreen
    id: display_weather_page
    x_min: 94
    x_max: 147
    y_min: 255
    y_max: 303
    filters:
      - delayed_on_off: .2s
    on_press:
      - display.page.show: page3
      - component.update: lcd_display

logger:
  logs:
    component: ERROR
 
sensor:
  - platform: template
    name: "Display Last Update"
    device_class: timestamp
    entity_category: "diagnostic"
    id: display_last_update
  - platform: template
    name: "Recorded Display Refresh"
    accuracy_decimals: 0
    unit_of_measurement: "Refreshes"
    state_class: "total_increasing"
    entity_category: "diagnostic"
    lambda: 'return id(recorded_display_refresh);'
  - platform: wifi_signal
    name: "ESP32 LCD Display WiFi Signal"
    id: wifisignal
    update_interval: 60s
    device_class: signal_strength
    on_value:
      then:
         - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.lcd_display_data
    attribute: tirelinc_1
    id: tirelinc_1
    device_class: pressure
    on_value:
      then:
         - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.lcd_display_data
    attribute: tirelinc_2
    id: tirelinc_2
    device_class: pressure
    on_value:
      then:
         - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.lcd_display_data
    attribute: tirelinc_3
    id: tirelinc_3
    device_class: pressure
    on_value:
      then:
         - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.lcd_display_data
    attribute: tirelinc_4
    id: tirelinc_4
    device_class: pressure
    on_value:
      then:
         - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.lcd_display_data
    attribute: inside_temperature
    id: inside_temperature
    device_class: temperature
    on_value:
      then:
         - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.lcd_display_data
    attribute: watchdog_current_1
    device_class: apparent_power
    id: line_1_current
    on_value:
      then:
         - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.lcd_display_data
    attribute: watchdog_current_2
    device_class: apparent_power
    id: line_2_current
    on_value:
      then:
         - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.lcd_display_data
    attribute: watchdog_power_usage
    id: power_usage
    device_class: power
    on_value:
      then:
         - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.lcd_display_data
    attribute: watchdog_total_amps
    id: total_current
    on_value:
      then:
         - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    id: left_tank
    entity_id: sensor.lcd_display_data
    attribute: left_tank_level
    device_class: power_factor
    on_value:
      then:
         - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    id: right_tank
    entity_id: sensor.lcd_display_data
    attribute: right_tank_level
    device_class: power_factor
    on_value:
      then:
         - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    id: extra_tank
    entity_id: sensor.lcd_display_data
    attribute: extra_tank_level
    device_class: power_factor
    on_value:
      then:
         - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.lcd_display_data
    attribute: weather_temperature_now
    id: weather_temperature
    device_class: temperature
    on_value:
      then:
         - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.lcd_display_data
    attribute: weather_temperature_0
    id: weather_temperature_0
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.lcd_display_data
    attribute: weather_temperature_low_0
    id: weather_temperature_low_0
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.lcd_display_data
    attribute: weather_temperature_1
    id: weather_temperature_1
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.lcd_display_data
    attribute: weather_temperature_low_1
    id: weather_temperature_low_1
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.lcd_display_data
    attribute: weather_temperature_2
    id: weather_temperature_2
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.lcd_display_data
    attribute: weather_temperature_low_2
    id: weather_temperature_low_2
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.lcd_display_data
    attribute: weather_temperature_3
    id: weather_temperature_3
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.lcd_display_data
    attribute: weather_temperature_low_3
    id: weather_temperature_low_3
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

time:
  - platform: homeassistant
    id: esptime
    on_time:
      - cron: '00 /5 * * * *'
        then:
          - display.page.show: page1
          - component.update: lcd_display
          - logger.log: "Screen timeout - Return to Main Screen."
      - cron: '00 /15 * * * *'
        then:
          - if:
              condition:
                lambda: 'return id(data_updated) == true;'
              then:
                - script.execute: update_screen
              else:
                - logger.log: "No sensors updated - skipping display refresh."

text_sensor:
  - platform: template
    id: current_time
    name: "Current Time"
    update_interval: 10s
    lambda: return id(esptime).now().strftime("%I:%M %P");
  - platform: homeassistant
    entity_id: sensor.lcd_display_data
    attribute: current_location
    id: current_location
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: wifi_info
    ssid:
      id: ssid_name
      on_value:
        then:
        - lambda: |
            id(data_updated) = true; 
            id(initial_data_received) = true;
  - platform: homeassistant
    entity_id: sensor.lcd_display_data
    attribute: weather_condition_now
    id: weather_condition_now
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.lcd_display_data
    attribute: weather_condition_0
    id: weather_condition_0
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.lcd_display_data
    attribute: weather_timestamp_0
    id: weather_timestamp_0
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.lcd_display_data
    attribute: weather_condition_1
    id: weather_condition_1
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.lcd_display_data
    attribute: weather_timestamp_1
    id: weather_timestamp_1
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.lcd_display_data
    attribute: weather_condition_2
    id: weather_condition_2
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.lcd_display_data
    attribute: weather_timestamp_2
    id: weather_timestamp_2
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.lcd_display_data
    attribute: weather_condition_3
    id: weather_condition_3
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.lcd_display_data
    attribute: weather_timestamp_3
    id: weather_timestamp_3
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

display:
  - platform: ili9xxx
    model: ILI9341
    spi_id: lcd
    cs_pin:
      number: 15
      ignore_strapping_warning: true
    dc_pin: 
      number: 2
      ignore_strapping_warning: true
    invert_colors: false
    id: lcd_display
    pages:
      - id: page1
        lambda: |-
          std::map<std::string, std::string> weather_icon_map
          {
            {"cloudy", "\U000F0590"},
            {"cloudy-alert", "\U000F0F2F"},
            {"cloudy-arrow-right", "\U000F0E6E"},
            {"fog", "\U000F0591"},
            {"hail", "\U000F0592"},
            {"hazy", "\U000F0F30"},
            {"hurricane", "\U000F0898"},
            {"lightning", "\U000F0593"},
            {"lightning-rainy", "\U000F067E"},
            {"clear-night", "\U000F0594"},
            {"night-partly-cloudy", "\U000F0F31"},
            {"partlycloudy", "\U000F0595"},
            {"partly-lightning", "\U000F0F32"},
            {"partly-rainy", "\U000F0F33"},
            {"partly-snowy", "\U000F0F34"},
            {"partly-snowy-rainy", "\U000F0F35"},
            {"pouring", "\U000F0596"},
            {"rainy", "\U000F0597"},
            {"snowy", "\U000F0598"},
            {"snowy-heavy", "\U000F0F36"},
            {"snowy-rainy", "\U000F067F"},
            {"sunny", "\U000F0599"},
            {"sunny-alert", "\U000F0F37"},
            {"sunny-off", "\U000F14E4"},
            {"sunset", "\U000F059A"},
            {"sunset-down", "\U000F059B"},
            {"sunset-up", "\U000F059C"},
            {"tornado", "\U000F0F38"},
            {"windy", "\U000F059D"},
            {"windy-variant", "\U000F059E"},
          };
          int hs = it.get_width() / 2;
          int hq = it.get_width() / 4;
          int vs = it.get_height() / 8;
          int line_gap = 12;
          it.rectangle(0,  0, it.get_width(), it.get_height(), id(my_blue));
          it.rectangle(0, 20, it.get_width(), it.get_height(), id(my_blue));
          it.printf(5, 5, id(robotocondensed_12), id(my_white), TextAlign::TOP_LEFT, "%s", id(current_time).state.c_str());
          if (id(initial_data_received) == false) {
            it.printf(hs, 5, id(robotocondensed_12), id(my_white), TextAlign::TOP_CENTER, "WAITING FOR DATA...");
          }
          else {
            it.printf(hs, 5, id(robotocondensed_12), id(my_yellow), TextAlign::TOP_CENTER, "%s", id(current_location).state.c_str());
          }
          if (id(system_status).state) {
            if (id(wifisignal).state >= -30)  {
              it.print(it.get_width() - 15, 5, id(font_mdi_status), id(my_green), "\U000F0928");
            } else if (id(wifisignal).state < -30 && id(wifisignal).state >= -67) {
              it.print(it.get_width() - 15, 5, id(font_mdi_status), id(my_green), "\U000F0925");
            } else if (id(wifisignal).state < -67 && id(wifisignal).state >= -70) {
              it.print(it.get_width() - 15, 5, id(font_mdi_status), id(my_green), "\U000F0922");
            } else if (id(wifisignal).state < -70 && id(wifisignal).state >= -80) {
              it.print(it.get_width() - 15, 5, id(font_mdi_status), id(my_green), "\U000F091F");
            } else {
              it.print(it.get_width() - 15, 5, id(font_mdi_status), id(my_green), "\U000F092F");
            } 
          }
          else {
            it.print(it.get_width() - 15, 5, id(font_mdi_status), id(my_red), "\U000F092E");
          }
          it.line(0, vs * 1, it.get_width(), vs * 1, id(my_blue));
          it.print(hs, vs * 0.75, id(robotocondensed_12), id(my_teal), TextAlign::CENTER, "Devices");
          if (id(lci_bottom_light).state) {
            it.image(hq - 25, 43, id(bottom_light), id(my_green), id(my_black));
          }
          else {
            it.image(hq - 25, 43, id(bottom_light), id(my_gray), id(my_black));
          }
          if (id(lci_front_light).state) {
            it.image(3*hq - 25, 43, id(top_light), id(my_green), id(my_black));
          }
          else {
            it.image(3*hq - 25, 43, id(top_light), id(my_gray), id(my_black));
          }
          if (id(camera_toggler).state) {
            it.image(2*hq - 25, 43, id(camera_control), id(my_green), id(my_black));
          }
          else {
            it.image(2*hq - 25, 43, id(camera_control), id(my_gray), id(my_black));
          }
          it.print(hq , 100, id(robotocondensed_10), id(my_white), TextAlign::CENTER, "Bottom");
          it.print(2*hq, 100, id(robotocondensed_10), id(my_white), TextAlign::CENTER, "Cameras");
          it.print(3*hq, 100, id(robotocondensed_10), id(my_white), TextAlign::CENTER, "Front");
          it.line(0, vs * 2.75, it.get_width(), vs * 2.75, id(my_blue));
          it.print(hq, vs * 2.75 + line_gap, id(robotocondensed_12), id(my_teal), TextAlign::CENTER, "Power");
          it.print(3*hq, vs * 2.75 + line_gap, id(robotocondensed_12), id(my_teal), TextAlign::CENTER, "Propane");
          it.line(0, vs * 3.25, it.get_width(), vs * 3.25, id(my_blue));
          it.printf(hq, vs * 3.75, id(robotocondensed_12), id(my_white), TextAlign::CENTER, "Watts %.1fW", id(power_usage).state);
          if (id(right_tank).state < 20) {
            it.printf(3*hq, vs * 3.75, id(robotocondensed_12), id(my_red), TextAlign::CENTER, "Right: %.0f%%", id(right_tank).state);
          }
          else {
            it.printf(3*hq, vs * 3.75, id(robotocondensed_12), id(my_white), TextAlign::CENTER, "Right: %.0f%%", id(right_tank).state);
          }
          if (id(left_tank).state < 20) {
            it.printf(3*hq, vs * 4.15, id(robotocondensed_12), id(my_red), TextAlign::CENTER, "Left: %.0f%%", id(left_tank).state);
          }
          else {
            it.printf(3*hq, vs * 4.15, id(robotocondensed_12), id(my_white), TextAlign::CENTER, "Left: %.0f%%", id(left_tank).state);
          }
          if (id(extra_tank).state < 20) {
            it.printf(3*hq, vs * 4.55, id(robotocondensed_12), id(my_red), TextAlign::CENTER, "Extra: %.0f%%", id(extra_tank).state);
          }
          else {
            it.printf(3*hq, vs * 4.55, id(robotocondensed_12), id(my_white), TextAlign::CENTER, "Extra: %.0f%%", id(extra_tank).state);
          }
          if (id(line_1_current).state > 25) {
            it.printf(hq, vs * 4.15, id(robotocondensed_12), id(my_red), TextAlign::CENTER, "Leg 1 %.1fA", id(line_1_current).state);
          }
          else {
            it.printf(hq, vs * 4.15, id(robotocondensed_12), id(my_white), TextAlign::CENTER, "Leg 1 %.1fA", id(line_1_current).state);
          }
          if (id(line_2_current).state > 25) {
            it.printf(hq, vs * 4.55, id(robotocondensed_12), id(my_red), TextAlign::CENTER, "Leg 2 %.1fA", id(line_2_current).state);
          }
          else {
            it.printf(hq, vs * 4.55, id(robotocondensed_12), id(my_white), TextAlign::CENTER, "Leg 2 %.1fA", id(line_2_current).state);
          }
          if (id(total_current).state > 50) {
            it.printf(hq, vs * 4.9, id(robotocondensed_12), id(my_red), TextAlign::CENTER, "Total %.1fA", id(total_current).state);
          }
          else {
            it.printf(hq, vs * 4.9, id(robotocondensed_12), id(my_white), TextAlign::CENTER, "Total %.1fA", id(total_current).state);
          }
          it.line(0, vs * 5.5, it.get_width(), vs * 5.5, id(my_blue));
          it.print(hs, vs * 5.5 + line_gap, id(robotocondensed_12), id(my_teal), TextAlign::CENTER, "Temperatures");
          it.line(0, vs * 6, it.get_width(), vs * 6, id(my_blue));
          if (id(inside_temperature).has_state()) {
            it.print(hq, vs * 6.25, id(robotocondensed_12), id(my_yellow), TextAlign::CENTER, "Inside");
            it.printf(hq, vs * 7, id(font_medium_bold), id(my_white), TextAlign::CENTER, "%2.0f°F", id(inside_temperature).state);
          }
          if (id(weather_temperature).has_state()) {
            it.print(2.75 * hq, vs * 6.25, id(robotocondensed_12), id(my_yellow), TextAlign::CENTER, "Outside");
            it.printf(2.85 * hq, vs * 7, id(font_medium_bold), id(my_white), TextAlign::CENTER, "%2.0f°F", id(weather_temperature).state);
          }
          it.line(0, it.get_height()-20, it.get_width(), it.get_height()-20, id(my_blue)); 
          it.print(10, it.get_height()-3, id(robotocondensed_12), id(my_white), TextAlign::BOTTOM_LEFT, "TRAILER");
          it.printf(hs, it.get_height()-3, id(robotocondensed_12), id(my_white), TextAlign::BOTTOM_CENTER, "WEATHER");
          it.print(it.get_width() - 15, it.get_height()-3, id(robotocondensed_12), id(my_white), TextAlign::BOTTOM_RIGHT, "TIRES");
      - id: page2
        lambda: |-
          int hs = it.get_width() / 2;
          int hq = it.get_width() / 4;
          int hz = it.get_width() / 8;
          int vs = it.get_height() / 8;
          int line_gap = 12; // distance of line from center of data text
          it.rectangle(0,  0, it.get_width(), it.get_height(), id(my_blue));
          it.rectangle(0, 20, it.get_width(), it.get_height(), id(my_blue));
          it.printf(5, 5, id(robotocondensed_12), id(my_white), TextAlign::TOP_LEFT, "%s", id(current_time).state.c_str());
          if (id(initial_data_received) == false) {
            it.printf(hs, 5, id(robotocondensed_12), id(my_white), TextAlign::TOP_CENTER, "WAITING FOR DATA...");
          }
          else {
            it.printf(hs, 5, id(robotocondensed_12), id(my_yellow), TextAlign::TOP_CENTER, "%s", id(current_location).state.c_str());
          }
          if (id(system_status).state) {
            if (id(wifisignal).state >= -30)  {
              it.print(it.get_width() - 15, 5, id(font_mdi_status), id(my_green), "\U000F0928");
            } else if (id(wifisignal).state < -30 && id(wifisignal).state >= -67) {
              it.print(it.get_width() - 15, 5, id(font_mdi_status), id(my_green), "\U000F0925");
            } else if (id(wifisignal).state < -67 && id(wifisignal).state >= -70) {
              it.print(it.get_width() - 15, 5, id(font_mdi_status), id(my_green), "\U000F0922");
            } else if (id(wifisignal).state < -70 && id(wifisignal).state >= -80) {
              it.print(it.get_width() - 15, 5, id(font_mdi_status), id(my_green), "\U000F091F");
            } else {
              it.print(it.get_width() - 15, 5, id(font_mdi_status), id(my_green), "\U000F092F");
            } 
          }
          else {
            it.print(it.get_width() - 15, 5, id(font_mdi_status), id(my_red), "\U000F092E");
          }
          it.line(0, vs * 1, it.get_width(), vs * 1, id(my_blue));
          it.print(hs, vs * 0.75, id(robotocondensed_12), id(my_teal), TextAlign::CENTER, "Trailer Tires");
          it.image(hq - 25, vs * 2, id(tirelinc), id(my_gray), id(my_black));
          it.printf(hq, vs * 3.75, id(robotocondensed_12), id(my_white), TextAlign::CENTER, "Left Front %.0f PSI", id(tirelinc_3).state);
          it.image(3*hq - 25, vs * 2, id(tirelinc), id(my_gray), id(my_black));
          it.printf(3*hq, vs * 3.75, id(robotocondensed_12), id(my_white), TextAlign::CENTER, "Right Front %.0f PSI", id(tirelinc_1).state);
          it.image(hq - 25, vs * 4.35, id(tirelinc), id(my_gray), id(my_black));
          it.printf(hq, vs * 6, id(robotocondensed_12), id(my_white), TextAlign::CENTER, "Left Rear %.0f PSI", id(tirelinc_4).state);
          it.image(3*hq - 25, vs * 4.35, id(tirelinc), id(my_gray), id(my_black));
          it.printf(3*hq, vs * 6, id(robotocondensed_12), id(my_white), TextAlign::CENTER, "Right Rear %.0f PSI", id(tirelinc_2).state);
          it.line(0, it.get_height()-20, it.get_width(), it.get_height()-20, id(my_blue)); // line across bottom above footer text
          it.print(10, it.get_height()-3, id(robotocondensed_12), id(my_white), TextAlign::BOTTOM_LEFT, "TRAILER");
          it.printf(hs, it.get_height()-3, id(robotocondensed_12), id(my_white), TextAlign::BOTTOM_CENTER, "WEATHER");
          it.print(it.get_width() - 15, it.get_height()-3, id(robotocondensed_12), id(my_white), TextAlign::BOTTOM_RIGHT, "TIRES");
      - id: page3
        lambda: |-
          std::map<std::string, std::string> weather_icon_map
          {
            {"cloudy", "\U000F0590"},
            {"cloudy-alert", "\U000F0F2F"},
            {"cloudy-arrow-right", "\U000F0E6E"},
            {"fog", "\U000F0591"},
            {"hail", "\U000F0592"},
            {"hazy", "\U000F0F30"},
            {"hurricane", "\U000F0898"},
            {"lightning", "\U000F0593"},
            {"lightning-rainy", "\U000F067E"},
            {"clear-night", "\U000F0594"},
            {"night-partly-cloudy", "\U000F0F31"},
            {"partlycloudy", "\U000F0595"},
            {"partly-lightning", "\U000F0F32"},
            {"partly-rainy", "\U000F0F33"},
            {"partly-snowy", "\U000F0F34"},
            {"partly-snowy-rainy", "\U000F0F35"},
            {"pouring", "\U000F0596"},
            {"rainy", "\U000F0597"},
            {"snowy", "\U000F0598"},
            {"snowy-heavy", "\U000F0F36"},
            {"snowy-rainy", "\U000F067F"},
            {"sunny", "\U000F0599"},
            {"sunny-alert", "\U000F0F37"},
            {"sunny-off", "\U000F14E4"},
            {"sunset", "\U000F059A"},
            {"sunset-down", "\U000F059B"},
            {"sunset-up", "\U000F059C"},
            {"tornado", "\U000F0F38"},
            {"windy", "\U000F059D"},
            {"windy-variant", "\U000F059E"},
          };
          int hs = it.get_width() / 2;
          int hq = it.get_width() / 4;
          int hz = it.get_width() / 5;
          int vs = it.get_height() / 8;
          int line_gap = 12;
          it.line(0, 20, it.get_width(), 20, id(my_blue));
          it.printf(5, 5, id(robotocondensed_12), id(my_white), TextAlign::TOP_LEFT, "%s", id(current_time).state.c_str());
          if (id(initial_data_received) == false) {
            it.printf(hs, 5, id(robotocondensed_12), id(my_white), TextAlign::TOP_CENTER, "WAITING FOR DATA...");
          }
          else {
            it.printf(hs, 5, id(robotocondensed_12), id(my_yellow), TextAlign::TOP_CENTER, "%s", id(current_location).state.c_str());
          }
          if (id(system_status).state) {
            if (id(wifisignal).state >= -30)  {
              it.print(it.get_width() - 15, 5, id(font_mdi_status), id(my_green), "\U000F0928");
            } else if (id(wifisignal).state < -30 && id(wifisignal).state >= -67) {
              it.print(it.get_width() - 15, 5, id(font_mdi_status), id(my_green), "\U000F0925");
            } else if (id(wifisignal).state < -67 && id(wifisignal).state >= -70) {
              it.print(it.get_width() - 15, 5, id(font_mdi_status), id(my_green), "\U000F0922");
            } else if (id(wifisignal).state < -70 && id(wifisignal).state >= -80) {
              it.print(it.get_width() - 15, 5, id(font_mdi_status), id(my_green), "\U000F091F");
            } else {
              it.print(it.get_width() - 15, 5, id(font_mdi_status), id(my_green), "\U000F092F");
            } 
          }
          else {
            it.print(it.get_width() - 15, 5, id(font_mdi_status), id(my_red), "\U000F092E");
          }
          it.printf(hs, vs, id(font_title), id(my_teal), TextAlign::TOP_CENTER, "WEATHER");
          it.printf(hz, vs * 1.9, id(font_mdi_large), id(my_white), TextAlign::TOP_CENTER, "%s", weather_icon_map[id(weather_condition_now).state.c_str()].c_str());
          it.printf(hz * 3, vs * 2, id(font_large_bold), id(my_white), TextAlign::TOP_CENTER, "%2.0f°F", id(weather_temperature).state);
          it.printf(hz, vs * 4, id(font_small_book), id(my_white), TextAlign::TOP_CENTER, "%s", id(weather_timestamp_0).state.c_str());
          it.printf(hz, vs * 4.25, id(font_mdi_medium), id(my_white), TextAlign::TOP_CENTER, "%s", weather_icon_map[id(weather_condition_0).state.c_str()].c_str());
          it.printf(hz, vs * 5, id(font_small_bold), id(my_white), TextAlign::TOP_CENTER, "H %2.0f°F", id(weather_temperature_0).state);
          it.printf(hz, vs * 5.5, id(font_small_bold), id(my_white), TextAlign::TOP_CENTER, "L %2.0f°F", id(weather_temperature_low_0).state);
          it.printf(hz * 2, vs * 4, id(font_small_book), id(my_white), TextAlign::TOP_CENTER, "%s", id(weather_timestamp_1).state.c_str());
          it.printf(hz * 2, vs * 4.25, id(font_mdi_medium), id(my_white), TextAlign::TOP_CENTER, "%s", weather_icon_map[id(weather_condition_1).state.c_str()].c_str());
          it.printf(hz * 2, vs * 5, id(font_small_bold), id(my_white), TextAlign::TOP_CENTER, "H %2.0f°F", id(weather_temperature_1).state);
          it.printf(hz * 2, vs * 5.5, id(font_small_bold), id(my_white), TextAlign::TOP_CENTER, "L %2.0f°F", id(weather_temperature_low_1).state);
          it.printf(hz * 3, vs * 4, id(font_small_book), id(my_white), TextAlign::TOP_CENTER, "%s", id(weather_timestamp_2).state.c_str());
          it.printf(hz * 3, vs * 4.25, id(font_mdi_medium), id(my_white), TextAlign::TOP_CENTER, "%s", weather_icon_map[id(weather_condition_2).state.c_str()].c_str());
          it.printf(hz * 3, vs * 5, id(font_small_bold), id(my_white), TextAlign::TOP_CENTER, "H %2.0f°F", id(weather_temperature_2).state);
          it.printf(hz * 3, vs * 5.5, id(font_small_bold), id(my_white), TextAlign::TOP_CENTER, "L %2.0f°F", id(weather_temperature_low_2).state);
          it.printf(hz * 4, vs * 4, id(font_small_book), id(my_white), TextAlign::TOP_CENTER, "%s", id(weather_timestamp_3).state.c_str());
          it.printf(hz * 4, vs * 4.25, id(font_mdi_medium), id(my_white), TextAlign::TOP_CENTER, "%s", weather_icon_map[id(weather_condition_3).state.c_str()].c_str());
          it.printf(hz * 4, vs * 5, id(font_small_bold), id(my_white), TextAlign::TOP_CENTER, "H %2.0f°F", id(weather_temperature_3).state);
          it.printf(hz * 4, vs * 5.5, id(font_small_bold), id(my_white), TextAlign::TOP_CENTER, "L %2.0f°F", id(weather_temperature_low_3).state);
          it.line(0, it.get_height()-20, it.get_width(), it.get_height()-20, id(my_blue)); // line across bottom above footer text
          it.print(10, it.get_height()-3, id(robotocondensed_12), id(my_white), TextAlign::BOTTOM_LEFT, "TRAILER");
          it.printf(hs, it.get_height()-3, id(robotocondensed_12), id(my_white), TextAlign::BOTTOM_CENTER, "WEATHER");
          it.print(it.get_width() - 15, it.get_height()-3, id(robotocondensed_12), id(my_white), TextAlign::BOTTOM_RIGHT, "TIRES");

output:
  - platform: ledc
    pin: GPIO21
    id: former_led_pin
  - platform: ledc
    id: output_red
    pin: GPIO4
    inverted: true
  - platform: ledc
    id: output_green
    pin: GPIO16
    inverted: true
  - platform: ledc
    id: output_blue
    pin: GPIO17
    inverted: true

light:
  - platform: monochromatic
    output: former_led_pin
    name: "Display Backlight"
    id: back_light
    restore_mode: ALWAYS_ON
  - platform: rgb
    name: LED
    red: output_red
    id: led
    green: output_green
    blue: output_blue
    restore_mode: ALWAYS_OFF

touchscreen:
  platform: xpt2046
  spi_id: touch
  cs_pin: 33
  interrupt_pin: 36
  update_interval: 50ms
  threshold: 400
  calibration:
    x_min: 280
    x_max: 3860
    y_min: 340
    y_max: 3860
  transform:
    mirror_x: true
    mirror_y: false
    swap_xy: false
  on_touch:
    - lambda: |-
         ESP_LOGI("cal", "x=%d, y=%d, x_raw=%d, y_raw=%0d",
              touch.x,
              touch.y,
              touch.x_raw,
              touch.y_raw
              );

switch:
  - platform: homeassistant
    id: lci_front_light
    entity_id: switch.lci_4ch_relay_front
  - platform: homeassistant
    id: lci_bottom_light
    entity_id: switch.lci_4ch_relay_bottom
  - platform: homeassistant
    id: camera_toggler
    entity_id: switch.camera_toggler

button:
  - platform: shutdown
    name: "LCD Display - Shutdown"
  - platform: restart
    name: "LCD Display - Restart"
  - platform: template
    name: "LCD Display - Refresh Screen"
    entity_category: config
    on_press:
      - script.execute: update_screen
